/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

-------------------------------------------------------------------------------
--------------                       TABLES                        ------------
-------------------------------------------------------------------------------
-- CREATE DNNrocket
if NOT exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN

CREATE TABLE {databaseOwner}[{objectQualifier}DNNrocket] (
	[ItemId] [int] IDENTITY (1, 1) NOT NULL ,
	[PortalId] [int] NULL CONSTRAINT [DF_DNNrocket_PortalId]  DEFAULT ((-1)),
	[ModuleId] [int] NULL CONSTRAINT [DF_DNNrocket_ModuleId]  DEFAULT ((-1)),
	[TypeCode] [nvarchar](50) NULL ,
	[XMLData] [xml] NULL ,
	[GUIDKey] [nvarchar](250) NULL ,
	[ModifiedDate] [datetime] NULL ,
	[TextData] [nvarchar](MAX) NULL ,
	[XrefItemId] [int] NULL ,
	[ParentItemId] [int] NULL ,
	[Lang] [nvarchar] (50) NULL ,
	[UserId] [int] NOT NULL CONSTRAINT [DF_DNNrocket_UserId] DEFAULT ((-1)),
	[SortOrder] [int] NULL CONSTRAINT [DF_DNNrocket_SortOrder]  DEFAULT ((-1)),	
	CONSTRAINT [PK_DNNrocket] PRIMARY KEY  CLUSTERED 
	(
		[ItemId]
	)  ON [PRIMARY] 
) ON [PRIMARY]

-- Index DNNrocket
 CREATE NONCLUSTERED INDEX IX_DNNrocketXref ON {databaseOwner}[{objectQualifier}DNNrocket] (  XrefItemId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ]  
 CREATE NONCLUSTERED INDEX IX_DNNrocketMod ON {databaseOwner}[{objectQualifier}DNNrocket] (  ModuleId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketParent ON {databaseOwner}[{objectQualifier}DNNrocket] (  ParentItemId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketPortal ON {databaseOwner}[{objectQualifier}DNNrocket] (  PortalId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketType ON {databaseOwner}[{objectQualifier}DNNrocket] (  TypeCode ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketUserId ON {databaseOwner}[{objectQualifier}DNNrocket] (  UserId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketLang ON {databaseOwner}[{objectQualifier}DNNrocket] (  Lang ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketGuidKey ON {databaseOwner}[{objectQualifier}DNNrocket] (  GuidKey ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketSortOrder ON {databaseOwner}[{objectQualifier}DNNrocket] (  SortOrder ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 

END

GO

-- CREATE DNNrocketTemp
if NOT exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocketTemp]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN

CREATE TABLE {databaseOwner}[{objectQualifier}DNNrocketTemp] (
	[ItemId] [int] IDENTITY (1, 1) NOT NULL ,
	[PortalId] [int] NULL CONSTRAINT [DF_DNNrocketTemp_PortalId]  DEFAULT ((-1)),
	[ModuleId] [int] NULL CONSTRAINT [DF_DNNrocketTemp_ModuleId]  DEFAULT ((-1)),
	[TypeCode] [nvarchar](50) NULL ,
	[XMLData] [xml] NULL ,
	[GUIDKey] [nvarchar](250) NULL ,
	[ModifiedDate] [datetime] NULL ,
	[TextData] [nvarchar](MAX) NULL ,
	[XrefItemId] [int] NULL ,
	[ParentItemId] [int] NULL ,
	[Lang] [nvarchar] (50) NULL ,
	[UserId] [int] NOT NULL CONSTRAINT [DF_DNNrocketTemp_UserId] DEFAULT ((-1)),
	[SortOrder] [int] NULL CONSTRAINT [DF_DNNrocketTemp_SortOrder]  DEFAULT ((-1)),	
	CONSTRAINT [PK_DNNrocketTemp] PRIMARY KEY  CLUSTERED 
	(
		[ItemId]
	)  ON [PRIMARY] 
) ON [PRIMARY]

-- Index DNNrocket
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempXref ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  XrefItemId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ]  
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempMod ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  ModuleId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempParent ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  ParentItemId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempPortal ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  PortalId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempType ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  TypeCode ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempUserId ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  UserId ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempLang ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  Lang ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempGuidKey ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  GuidKey ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 
 CREATE NONCLUSTERED INDEX IX_DNNrocketTempSortOrder ON {databaseOwner}[{objectQualifier}DNNrocketTemp] (  SortOrder ASC  )   WITH (  PAD_INDEX = OFF ,FILLFACTOR = 100  ,SORT_IN_TEMPDB = OFF , IGNORE_DUP_KEY = OFF , STATISTICS_NORECOMPUTE = OFF , DROP_EXISTING = OFF , ONLINE = OFF , ALLOW_ROW_LOCKS = ON , ALLOW_PAGE_LOCKS = ON  ) ON [PRIMARY ] 

END

GO


-------------------------------------------------------------------------------
--------------                       FUNCTIONS                     ------------
------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocketLangMerge]') and OBJECTPROPERTY(id, N'IsScalarFunction') = 1)
drop function {databaseOwner}[{objectQualifier}DNNrocketLangMerge]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}DNNrocketLangMerge](@xmllangdata AS XML,@xmlbasedata AS XML)
RETURNS XML
BEGIN

DECLARE @rtndata AS XML

IF NOT @xmlbasedata IS NULL
BEGIN
	IF NOT @xmllangdata IS NULL
	BEGIN
		SET @xmlbasedata.modify('insert <lang/> as last into /genxml[1]')
		SET @xmlbasedata.modify('insert sql:variable("@xmllangdata") as last into /genxml[1]/lang[1]')
	END
	SET @rtndata = @xmlbasedata
END
ELSE
BEGIN
	-- is not a language record so just return the language data
	SET @rtndata = ISNULL(@xmllangdata,'')
END

RETURN @rtndata

END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



-------------------------------------------------------------------------------
--------------                       SPROCS                        ------------
-------------------------------------------------------------------------------

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_CleanData]    Script Date: 14/06/2019 16:18:52 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_CleanData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_CleanData]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_CleanData]    Script Date: 14/06/2019 16:18:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_CleanData]
@TableName nvarchar(100)
AS
begin

 Declare @sql AS NVarchar(max)

 set @TableName = '{databaseOwner}' + @TableName


/***  Clean ALL data that is not linked to a module.  i.e. modules that have been deleted. **/
set @sql = 'delete from ' + @TableName + ' where moduleid not in (select moduleid from {databaseOwner}Modules) and moduleid > 0 ' 
	
	exec sp_executesql  @sql
end
GO


/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_DeleteAllData]    Script Date: 14/06/2019 16:18:52 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_DeleteAllData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_DeleteAllData]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_DeleteAllData]    Script Date: 14/06/2019 16:18:52 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_DeleteAllData]
@TableName nvarchar(100)
AS
begin

 Declare @sql AS NVarchar(max)

 set @TableName = '{databaseOwner}' + @TableName


/***  Clean ALL data that is not linked to a module.  i.e. modules that have been deleted. **/
set @sql = 'delete from ' + @TableName 
	
	exec sp_executesql  @sql
end
GO




/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_Delete]    Script Date: 15/06/2019 08:20:57 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_Delete]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_Delete]    Script Date: 15/06/2019 08:20:57 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO


CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_Delete]
@ItemID int,
@TableName nvarchar(100)
AS
begin

	if (@ItemId > 0)
	begin

	 Declare @sql AS NVarchar(max)
	 Declare @ParamDefinition AS NVarchar(max) 

	 set @TableName = '{databaseOwner}' + @TableName

set @sql = '		DECLARE @DelItemId int	'
set @sql += '	 Declare @TableName2 AS NVarchar(max) '

set @sql += '		set @TableName2 =  replace(@TableName,''{databaseOwner}'','''') '

		-- Delete all linked child records.
set @sql += '		DECLARE delete_cursor CURSOR LOCAL FOR '

set @sql += '		select ItemId from ' + @TableName + ' where ParentItemId = ' + CONVERT(nvarchar(20), @ItemId)
set @sql += '		OPEN delete_cursor'
set @sql += '		FETCH NEXT FROM delete_cursor INTO @DelItemId'
set @sql += '		WHILE @@FETCH_STATUS = 0'
set @sql += '		BEGIN'
set @sql += '			EXEC {databaseOwner}[{objectQualifier}DNNrocket_Delete] @DelItemId, @TableName2 '
set @sql += '			FETCH NEXT FROM delete_cursor INTO @DelItemId'
set @sql += '		END'
set @sql += '		CLOSE delete_cursor;'
set @sql += '		DEALLOCATE delete_cursor;'
		-- Delete all linked child records (xrefitemid).
set @sql += '		DECLARE delete_cursor1 CURSOR LOCAL FOR '
set @sql += '		select ItemId from ' + @TableName + ' where XrefItemId = ' + CONVERT(nvarchar(20), @ItemId)
set @sql += '		OPEN delete_cursor1'
set @sql += '		FETCH NEXT FROM delete_cursor1 INTO @DelItemId'
set @sql += '		WHILE @@FETCH_STATUS = 0'
set @sql += '		BEGIN'
set @sql += '			EXEC {databaseOwner}[{objectQualifier}DNNrocket_Delete] @DelItemId, @TableName '
set @sql += '			FETCH NEXT FROM delete_cursor1 INTO @DelItemId'
set @sql += '		END'
set @sql += '		CLOSE delete_cursor1;'
set @sql += '		DEALLOCATE delete_cursor1;'
set @sql += '		delete from ' + @TableName + ' where ItemId = ' + CONVERT(nvarchar(20), @ItemId)
	

		Set @ParamDefinition =      '@TableName nvarchar(100)'		
		exec sp_executesql  @sql, @ParamDefinition, @TableName
	end
	
end
GO


/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_Get]    Script Date: 19/06/2019 16:21:53 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_Get]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_Get]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_Get]    Script Date: 19/06/2019 16:21:53 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO



CREATE     PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_Get]
@ItemID int,
@Lang nvarchar(10),
@TableName nvarchar(100)
AS
begin

 Declare @sql AS NVarchar(max)

 set @TableName = '{databaseOwner}' + @TableName

set @sql = '	select '
set @sql += '	R1.[ItemId] '
set @sql += '	,R1.[PortalId] '
set @sql += '	,R1.[ModuleId] '
set @sql += '	,R1.[TypeCode] '

-- Use Function to merge, so save langauge works correctly.
set @sql += '	,{databaseOwner}[{objectQualifier}DNNrocketLangMerge](RLang1.[XMLData],R1.[XMLData]) as [XMLData] '				

set @sql += '	,R1.[GUIDKey] '
set @sql += '	,R1.[ModifiedDate] '
set @sql += '	,R1.[TextData] '
set @sql += '	,R1.[XrefItemId] '
set @sql += '	,R1.[ParentItemId] '
set @sql += '	,ISNULL(RLang1.[Lang],ISNULL(R1.[Lang],'''')) as [Lang]  '	 
set @sql += '	,R1.[UserId] '
set @sql += '	,R1.[SortOrder] '
set @sql += '	from ' + @TableName + ' as R1 '

set @sql += '	left join ' + @TableName + ' as RLang1 on RLang1.ParentItemId = R1.ItemId and RLang1.[Lang] = ''' + @Lang + '''  and RLang1.TypeCode =  R1.TypeCode + ''LANG'' ' 

set @sql += '	where R1.ItemId = ' + CONVERT(nvarchar(20), @ItemId)

print @sql

exec sp_executesql  @sql

end
GO



/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetList]    Script Date: 14/06/2019 16:19:27 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetList]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetList]    Script Date: 14/06/2019 16:19:27 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE    PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetList]
@PortalId int, 
@ModuleId int,
@TypeCode nvarchar(50),
@Filter nvarchar(1000),
@OrderBy nvarchar(500),
@ReturnLimit int = 0,
@pageNum int = 0,
@PageSize int = 0,
@RecordCount int = 0,
@Lang nvarchar(50) = '',
@TableName nvarchar(100)
AS
begin

 set @TableName = '{databaseOwner}' + @TableName

	SET NOCOUNT ON
	 
	if NOT(@Lang = '')
	begin
		SET @Filter = REPLACE(@Filter,'[XMLData]','ISNULL([RLangIdx].[XMLData],{databaseOwner}[{objectQualifier}DNNrocketLangMerge](RLang1.[XMLData],R1.[XMLData]))')
	end

------------------------------------------------------------------------------------
--- Cursor for INDEX records.
------------------------------------------------------------------------------------
DECLARE @idxname nvarchar(250) = ''
DECLARE @TCode nvarchar(250) = ''
DECLARE @idxparentItemId int = 0
DECLARE @systemlinkItemId int = 0
DECLARE @JoinIndex nvarchar(max)

select @systemlinkItemId = itemid from {databaseOwner}[{objectQualifier}DNNrocket] where [TypeCode] = 'SYSTEMLINK' and GUIDkey = @TypeCode 

--print '@systemlinkItemId: ' + convert(nvarchar(max),@systemlinkItemId)

DECLARE idx_cursor CURSOR FOR 
SELECT GUIDKey, ParentItemId, textdata
FROM {databaseOwner}[{objectQualifier}DNNrocket]
WHERE [TypeCode] like 'SYSTEMLINK%' and ParentItemId = @systemlinkItemId

SET @JoinIndex = ''

OPEN idx_cursor  
FETCH NEXT FROM idx_cursor INTO @idxname, @idxparentItemId, @TCode

WHILE @@FETCH_STATUS = 0  
BEGIN  

	if (CHARINDEX(@idxname, @Filter) > 0)
	begin

		set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as [' + @idxname + '] on [' + @idxname + '].XrefItemId = R1.ItemId and [' + @idxname + '].TypeCode = ''IDX_' + @idxname + ''' and ([' + @idxname + '].[Lang] = ''' + @Lang + ''' or [' + @idxname + '].[Lang] = '''') '

	end

	FETCH NEXT FROM idx_cursor INTO @idxname,@idxparentItemId, @TCode
END 

if (CHARINDEX('CATXREF', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as CATXREF on CATXREF.ParentItemId = R1.ItemId and CATXREF.TypeCode =  ''CATXREF'' '
end
if (CHARINDEX('CASCADE', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as CASCADE on CASCADE.ParentItemId = R1.ItemId and CASCADE.TypeCode =  ''CASCADE'' '
end
if (CHARINDEX('PROPXREF', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as PROPXREF on PROPXREF.ParentItemId = R1.ItemId and PROPXREF.TypeCode =  ''PROPXREF'' '
end
if (CHARINDEX('ATTRXREF', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as ATTRXREF on ATTRXREF.ParentItemId = R1.ItemId and ATTRXREF.TypeCode =  ''ATTRXREF'' '
end




CLOSE idx_cursor
DEALLOCATE idx_cursor

--print '@JoinIndex: ' + @JoinIndex

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

		IF (@PortalId  >= 0) BEGIN
			SET @Filter = ' and (R1.PortalId = '''  + Convert(nvarchar(10),@PortalId) + ''' or R1.PortalId = ''-1'') ' + @Filter
		END 
		IF (@ModuleId >= 0) BEGIN
			SET @Filter = ' and (R1.ModuleId = ''' + Convert(nvarchar(10),@ModuleId) + ''' or R1.ModuleId = ''-1'') ' + @Filter
		END 

	 
	 
	 DECLARE
		 @STMT nvarchar(max)         -- SQL to execute
		,@rtnFields nvarchar(max)

	IF (@PortalId >= 0) BEGIN

		IF (@ModuleId >= 0) BEGIN
			SET @Filter = ' and (R1.PortalId = '''  + Convert(nvarchar(10),@PortalId) + ''' or R1.PortalId = ''-1'') and (R1.ModuleId = ''' + Convert(nvarchar(10),@ModuleId) + ''' or R1.ModuleId = ''-1'') ' + @Filter
		END ELSE BEGIN
			SET @Filter = ' and (R1.PortalId = '''  + Convert(nvarchar(10),@PortalId) + '''  or R1.PortalId = ''-1'') ' + @Filter
		END 

	END 

	if NOT(@Lang = '')
	begin
		SET @OrderBy = REPLACE(@OrderBy,'[XMLData]','ISNULL([RLangIdx].[XMLData], {databaseOwner}[{objectQualifier}DNNrocketLangMerge](RLang1.[XMLData],R1.[XMLData]))')
	end

	set @rtnFields = ' R1.[ItemId] '

	if NOT(@Lang = '')
	begin
		set @rtnFields = @rtnFields + ',ISNULL([RLangIdx].[XMLData], {databaseOwner}[{objectQualifier}DNNrocketLangMerge](RLang1.[XMLData],R1.[XMLData])) as [XMLData] '				
		set @rtnFields = @rtnFields + ',ISNULL(RLang1.[Lang],ISNULL(R1.[Lang],'''')) as [Lang] '	 
	end
	if @Lang = ''
	begin
		set @rtnFields = @rtnFields + ',R1.[XMLData] '
		set @rtnFields = @rtnFields + ',R1.[Lang] as [Lang] '	 
	end
	
	set @rtnFields = @rtnFields + ',R1.[PortalId] '
	set @rtnFields = @rtnFields + ',R1.[ModuleId] '
	set @rtnFields = @rtnFields + ',R1.[TypeCode] '
	set @rtnFields = @rtnFields + ',R1.[GUIDKey] '
	set @rtnFields = @rtnFields + ',R1.[ModifiedDate] '
	set @rtnFields = @rtnFields + ',R1.[TextData] '
	set @rtnFields = @rtnFields + ',R1.[XrefItemId] '
	set @rtnFields = @rtnFields + ',R1.[ParentItemId] '
	set @rtnFields = @rtnFields + ',R1.[UserId] '
	set @rtnFields = @rtnFields + ',R1.[SortOrder] '		

	IF (@PageSize > 0)
	BEGIN
			-- Do Paging
		SET @STMT = 'DECLARE @recct int '
		set @STMT = @STMT + ' SET @recct = ' + Convert(nvarchar(5),@RecordCount) 
		
		set @STMT = @STMT + '   DECLARE @lbound int, @ubound int '

		SET @pageNum = ABS(@pageNum)
		SET @pageSize = ABS(@pageSize)
		IF @pageNum < 1 SET @pageNum = 1
		IF @pageSize < 1 SET @pageSize = 1

		set @STMT = @STMT + ' SET @lbound = ' + convert(nvarchar(50),((@pageNum - 1) * @pageSize))
		set @STMT = @STMT + ' SET @ubound = @lbound + ' + convert(nvarchar(50),(@pageSize + 1))
		set @STMT = @STMT + ' IF @lbound >= @recct BEGIN '
		set @STMT = @STMT + '   SET @ubound = @recct + 1 '
		set @STMT = @STMT + '   SET @lbound = @ubound - (' + convert(nvarchar(50),(@pageSize + 1)) + ') ' -- return the last page of records if no records would be on the specified page '
		set @STMT = @STMT + ' END '
		
		-- Default order by clause
		if @OrderBy = '' 
		Begin
			set @OrderBy = ' ORDER BY R1.ModifiedDate DESC '
		End
		
		set @STMT = @STMT + ' SELECT '
		if @ReturnLimit > 0 
		begin
			set @STMT = @STMT + ' top ' + convert(nvarchar(10),@ReturnLimit)
		end
		
		set @STMT = @STMT + @rtnFields		

		set @STMT = @STMT + ' FROM    (
								SELECT  ROW_NUMBER() OVER(' + @orderBy + ') AS row, '
		set @STMT = @STMT + @rtnFields		
		set @STMT = @STMT + ' FROM ' + @TableName + '  as R1 '

		if NOT(@Lang = '')
		begin
			set @STMT = @STMT + ' left join ' + @TableName + ' as RLang1 on RLang1.ParentItemId = R1.ItemId and RLang1.[Lang] = ''' + @Lang + '''  and RLang1.TypeCode =  R1.TypeCode + ''LANG'' ' 
			set @STMT = @STMT + ' left join ' + @TableName + ' as [RLangIdx] on [RLangIdx].ParentItemId = R1.ItemId and [RLangIdx].[Lang] = ''' + @Lang + '''  and [RLangIdx].TypeCode =  R1.TypeCode + ''LANGIDX'' ' 
		end
		
		set @STMT = @STMT + @JoinIndex

				IF (RIGHT(@TypeCode,1) = '%')
			BEGIN
				set @STMT = @STMT + 'WHERE R1.TypeCode Like ''' + @TypeCode + ''' ' + @Filter  
			END ELSE
			BEGIN
				IF (@TypeCode = '')
				BEGIN
					set @STMT = @STMT + 'WHERE R1.TypeCode != ''''' + @Filter  
				END ELSE
				BEGIN
					set @STMT = @STMT + 'WHERE R1.TypeCode = ''' + @TypeCode + ''' ' + @Filter  
				END
			END	                                                              
			
			set @STMT = @STMT + ' ) AS R1 '

			if NOT(@Lang = '')
			begin
				set @STMT = @STMT + ' left join ' + @TableName + ' as RLang1 on RLang1.ParentItemId = R1.ItemId and RLang1.[Lang] = ''' + @Lang + '''  and RLang1.TypeCode =  R1.TypeCode + ''LANG'' ' 
				set @STMT = @STMT + ' left join ' + @TableName + ' as [RLangIdx] on [RLangIdx].ParentItemId = R1.ItemId and [RLangIdx].[Lang] = ''' + @Lang + '''  and [RLangIdx].TypeCode =  R1.TypeCode + ''LANGIDX'' ' 
			end

			set @STMT = @STMT + ' WHERE row > @lbound AND row < @ubound '

			
	END ELSE
	BEGIN
		-- DO NON-PAGING

		set @STMT = ' SELECT '
		if @ReturnLimit > 0 
		begin
			set @STMT = @STMT + ' top ' + convert(nvarchar(10),@ReturnLimit)
		end
		
		set @STMT = @STMT + @rtnFields		

		set @STMT = @STMT + ' FROM ' + @TableName + '  as R1 '

		if NOT(@Lang = '')
		begin
			set @STMT = @STMT + ' left join ' + @TableName + ' as RLang1 on RLang1.ParentItemId = R1.ItemId and RLang1.[Lang] = ''' + @Lang + '''  and RLang1.TypeCode =  R1.TypeCode + ''LANG'' ' 
			set @STMT = @STMT + ' left join ' + @TableName + ' as [RLangIdx] on [RLangIdx].ParentItemId = R1.ItemId and [RLangIdx].[Lang] = ''' + @Lang + '''  and [RLangIdx].TypeCode =  R1.TypeCode + ''LANGIDX'' ' 
		end
		
		set @STMT = @STMT + @JoinIndex

		IF (RIGHT(@TypeCode,1) = '%')
		BEGIN
			set @STMT = @STMT + 'WHERE R1.TypeCode Like ''' + @TypeCode + ''' ' + @Filter  
		END ELSE
		BEGIN
			IF (@TypeCode = '')
			BEGIN
				set @STMT = @STMT + 'WHERE R1.TypeCode != '''' ' + @Filter  
			END ELSE
			BEGIN
				set @STMT = @STMT + 'WHERE R1.TypeCode = ''' + @TypeCode + ''' ' + @Filter  
			END
		END	                                                              	

		set @STMT = @STMT + ' ' + @OrderBy                                                           	

	END		



	EXEC sp_executeSQL @STMT                 -- return requested records

end
GO



/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetListCount]    Script Date: 14/06/2019 16:20:12 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetListCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetListCount]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetListCount]    Script Date: 14/06/2019 16:20:12 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE    PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetListCount] 
@PortalId int, 
@ModuleId int,
@TypeCode nvarchar(50),
@Filter nvarchar(1000),
@Lang nvarchar(50),
@RecordCount int OUTPUT,
@TableName nvarchar(100)
AS
begin

 set @TableName = '{databaseOwner}' + @TableName

	SET @Filter = REPLACE(@Filter,'[XMLData]','{databaseOwner}[{objectQualifier}DNNrocketLangMerge](RLang1.[XMLData],R1.[XMLData])')


------------------------------------------------------------------------------------
--- Cursor for INDEX records.
------------------------------------------------------------------------------------
DECLARE @idxname nvarchar(250) = ''
DECLARE @TCode nvarchar(250) = ''
DECLARE @idxparentItemId int = 0
DECLARE @systemlinkItemId int = 0
DECLARE @JoinIndex nvarchar(max)

select @systemlinkItemId = itemid from {databaseOwner}[{objectQualifier}DNNrocket] where [TypeCode] = 'SYSTEMLINK' and GUIDkey = @TypeCode 

--print '@systemlinkItemId: ' + convert(nvarchar(max),@systemlinkItemId)

DECLARE idx_cursor CURSOR FOR 
SELECT GUIDKey, ParentItemId, textdata
FROM {databaseOwner}[{objectQualifier}DNNrocket]
WHERE [TypeCode] like 'SYSTEMLINK%' and ParentItemId = @systemlinkItemId

SET @JoinIndex = ''

OPEN idx_cursor  
FETCH NEXT FROM idx_cursor INTO @idxname, @idxparentItemId, @TCode

WHILE @@FETCH_STATUS = 0  
BEGIN  

	if (CHARINDEX(@idxname, @Filter) > 0)
	begin

		set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as [' + @idxname + '] on [' + @idxname + '].XrefItemId = R1.ItemId and [' + @idxname + '].TypeCode = ''IDX_' + @idxname + ''' and ([' + @idxname + '].[Lang] = ''' + @Lang + ''' or [' + @idxname + '].[Lang] = '''') '

	end

	FETCH NEXT FROM idx_cursor INTO @idxname,@idxparentItemId, @TCode
END 

if (CHARINDEX('CATXREF', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as CATXREF on CATXREF.ParentItemId = R1.ItemId and CATXREF.TypeCode =  ''CATXREF'' '
end
if (CHARINDEX('CASCADE', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as CASCADE on CASCADE.ParentItemId = R1.ItemId and CASCADE.TypeCode =  ''CASCADE'' '
end
if (CHARINDEX('PROPXREF', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as PROPXREF on PROPXREF.ParentItemId = R1.ItemId and PROPXREF.TypeCode =  ''PROPXREF'' '
end
if (CHARINDEX('ATTRXREF', @Filter) > 0)
begin
	set @JoinIndex = @JoinIndex + ' left join ' + @TableName + ' as ATTRXREF on ATTRXREF.ParentItemId = R1.ItemId and ATTRXREF.TypeCode =  ''ATTRXREF'' '
end


CLOSE idx_cursor
DEALLOCATE idx_cursor

--print '@JoinIndex: ' + @JoinIndex

------------------------------------------------------------------------------------
------------------------------------------------------------------------------------

		IF (@PortalId  >= 0) BEGIN
			SET @Filter = ' and (R1.PortalId = '''  + Convert(nvarchar(10),@PortalId) + ''' or R1.PortalId = ''-1'') ' + @Filter
		END 
		IF (@ModuleId >= 0) BEGIN
			SET @Filter = ' and (R1.ModuleId = ''' + Convert(nvarchar(10),@ModuleId) + ''' or R1.ModuleId = ''-1'') ' + @Filter
		END 

	--DECLARE @RecordCount int
	DECLARE @countselect nvarchar(max)

			set @countselect = ' SELECT '
	
			set @countselect = @countselect + ' @RecordCount=count(R1.ItemId) '	

			set @countselect = @countselect + ' FROM ' + @TableName + '  as R1 '

			if NOT(@Lang = '')
			begin
				set @countselect = @countselect + ' left join ' + @TableName + ' as RLang1 on RLang1.ParentItemId = R1.ItemId and RLang1.[Lang] = ''' + @Lang + '''  and RLang1.TypeCode =  R1.TypeCode + ''LANG'' ' 
			end
	
			set @countselect = @countselect + @JoinIndex

			IF (RIGHT(@TypeCode,1) = '%')
			BEGIN
				set @countselect = @countselect + 'WHERE R1.TypeCode Like ''' + @TypeCode + ''' ' + @Filter  
			END ELSE
			BEGIN
				IF (@TypeCode = '')
				BEGIN
					set @countselect = @countselect + 'WHERE R1.TypeCode != ''''' + @Filter  
				END ELSE
				BEGIN
					set @countselect = @countselect + 'WHERE R1.TypeCode = ''' + @TypeCode + ''' ' + @Filter  
				END
			END	                                                              	

		exec sp_executesql @countselect, N'@RecordCount int output', @RecordCount output;

		SELECT @RecordCount AS RecordCount       -- return the total # of records

END
GO


/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetRecord]    Script Date: 14/06/2019 16:20:22 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetRecord]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetRecord]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetRecord]    Script Date: 14/06/2019 16:20:22 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE     PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetRecord]
@ItemID int,
@TableName nvarchar(100)
AS
begin

 Declare @sql AS NVarchar(max)

 set @TableName = '{databaseOwner}' + @TableName

set @sql = '	select '
set @sql += '	[ItemId] '
set @sql += '	,[PortalId] '
set @sql += '	,[ModuleId] '
set @sql += '	,[TypeCode] '
set @sql += '	,[XMLData] '
set @sql += '	,[GUIDKey] '
set @sql += '	,[ModifiedDate] '
set @sql += '	,[TextData] '
set @sql += '	,[XrefItemId] '
set @sql += '	,[ParentItemId] '
set @sql += '	,[Lang]  '
set @sql += '	,[UserId] '
set @sql += '	,[SortOrder] '
set @sql += '	from ' + @TableName + ' as R1 '
set @sql += '	where R1.ItemId = ' + CONVERT(nvarchar(20), @ItemId)

exec sp_executesql  @sql

end
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetRecordLang]    Script Date: 14/06/2019 16:20:33 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetRecordLang]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetRecordLang]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_GetRecordLang]    Script Date: 14/06/2019 16:20:33 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE     PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetRecordLang]
@ParentItemId int,
@Lang nvarchar(10),
@TableName nvarchar(100)
AS
begin


 Declare @sql AS NVarchar(max)

 set @TableName = '{databaseOwner}' + @TableName

set @sql = '	select '
set @sql += '	[ItemId] '
set @sql += '	,[PortalId] '
set @sql += '	,[ModuleId] '
set @sql += '	,[TypeCode] '
set @sql += '	,[XMLData] '
set @sql += '	,[GUIDKey] '
set @sql += '	,[ModifiedDate] '
set @sql += '	,[TextData] '
set @sql += '	,[XrefItemId] '
set @sql += '	,[ParentItemId] '
set @sql += '	,[Lang]  '
set @sql += '	,[UserId] '
set @sql += '	,[SortOrder] '
set @sql += '	from ' + @TableName + ' as R1 '
set @sql += '	where R1.ParentItemId = ' + CONVERT(nvarchar(20), @ParentItemId) + ' and R1.Lang = ''' + @Lang + ''' ' 

print @sql

exec sp_executesql  @sql

end
GO


/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_Update]    Script Date: 14/06/2019 16:20:44 ******/
if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_Update]
GO

/****** Object:  StoredProcedure {databaseOwner}[{objectQualifier}DNNrocket_Update]    Script Date: 14/06/2019 16:20:44 ******/
SET ANSI_NULLS ON
GO

SET QUOTED_IDENTIFIER ON
GO

CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_Update]
(
@ItemId int,
@PortalId int, 
@ModuleId int,
@TypeCode nvarchar(50),
@XMLData xml,
@GUIDKey nvarchar(250),
@ModifiedDate datetime,
@TextData nvarchar(MAX),
@XrefItemId int,
@ParentItemId int,
@UserId int,
@Lang nvarchar(10),
@SortOrder int,
@TableName nvarchar(100)
)
AS
BEGIN

 Declare @sql AS NVarchar(max)
 Declare @ParamDefinition AS NVarchar(max) 

 set @TableName = '{databaseOwner}' + @TableName

set @sql = 'if not exists (select ItemID from ' + @TableName + ' where ItemID = @ItemID ) '
set @sql += '	begin '
set @sql += '		insert into ' + @TableName + ' '
set @sql += '		( '
set @sql += 'PortalId,  '
set @sql += 'ModuleId, '
set @sql += 'TypeCode, '
set @sql += 'XMLData, '
set @sql += 'GUIDKey, '
set @sql += 'ModifiedDate, '
set @sql += 'TextData, '
set @sql += 'XrefItemId, '
set @sql += 'ParentItemId, '
set @sql += 'UserId, '
set @sql += 'Lang, '
set @sql += 'SortOrder '
set @sql += '		) '
set @sql += '		values '
set @sql += '		( '
set @sql += '@PortalId,  '
set @sql += '@ModuleId, '
set @sql += '@TypeCode, '
set @sql += '@XMLData, '
set @sql += '@GUIDKey, '
set @sql += '@ModifiedDate, '
set @sql += '@TextData, '
set @sql += '@XrefItemId, '
set @sql += '@ParentItemId, '
set @sql += '@UserId, '
set @sql += '@Lang, '
set @sql += '@SortOrder '
set @sql += '		) '
set @sql += '		 '
set @sql += '		set @ItemID = @@IDENTITY '
set @sql += ' '
set @sql += '	end '
set @sql += '	else '
set @sql += '	begin '
set @sql += '		Update ' + @TableName + ' '
set @sql += '		set  '
set @sql += 'PortalId = @PortalId,  '
set @sql += 'ModuleId = @ModuleId, '
set @sql += 'TypeCode = @TypeCode, '
set @sql += 'XMLData = @XMLData, '
set @sql += 'GUIDKey = @GUIDKey, '
set @sql += 'ModifiedDate = @ModifiedDate, '
set @sql += 'TextData = @TextData, '
set @sql += 'XrefItemId = @XrefItemId, '
set @sql += 'ParentItemId = @ParentItemId, '
set @sql += 'UserId = @UserId, '
set @sql += 'Lang = @Lang, '
set @sql += 'SortOrder = @SortOrder '
set @sql += '		where ItemId = @ItemId '
set @sql += '  '
set @sql += '	end '	
set @sql += '	select @ItemID '		

	Set @ParamDefinition =      '@ItemId int OUTPUT,
@PortalId int, 
@ModuleId int,
@TypeCode nvarchar(50),
@XMLData xml,
@GUIDKey nvarchar(250),
@ModifiedDate datetime,
@TextData nvarchar(MAX),
@XrefItemId int,
@ParentItemId int,
@UserId int,
@Lang nvarchar(10),
@SortOrder int'

 Execute sp_Executesql     @sql, 
                @ParamDefinition, 
@ItemId OUTPUT,
@PortalId, 
@ModuleId,
@TypeCode,
@XMLData,
@GUIDKey,
@ModifiedDate,
@TextData,
@XrefItemId,
@ParentItemId,
@UserId,
@Lang,
@SortOrder

select @ItemId
END
GO



SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetDNNUsers]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetDNNUsers]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetDNNUsers]
@PortalId int, 
@FilterText nvarchar(max),
@ReturnLimit int = 0,
@pageNum int = 0,
@PageSize int = 0,
@RecordCount int = 0
AS
begin

		DECLARE @recct int 
		SET @recct = @RecordCount
		
		DECLARE @lbound int, @ubound int;

		SET @pageNum = ABS(@pageNum);
		SET @pageSize = ABS(@pageSize);
		IF @pageNum < 1 SET @pageNum = 1;
		IF @pageSize < 1 SET @pageSize = 1;

		SET @lbound = ((@pageNum - 1) * @pageSize);;
		SET @ubound = @lbound + (@pageSize + 1);
		IF @lbound >= @recct BEGIN 
		   SET @ubound = @recct + 1 ;
		   SET @lbound = @ubound - (@pageSize + 1);  -- return the last page of records if no records would be on the specified page '
		END ;


		with [UsersBy] as (
			SELECT 
			U.UserId as ItemId,
			U.PortalId,
			'<genxml><textbox>' +
			'<username>' + U.Username + '</username>' +
			'<firstname>' + U.FirstName   + '</firstname>' +
			'<lastname>' + U.LastName  + '</lastname>' +
			'<displayname>' + U.DisplayName  + '</displayname>' +
			'<email>' + U.Email  + '</email>' +
			'<authorised>' + convert(nvarchar(1),U.Authorised)  + '</authorised>' +
			'<updatepassword>' + convert(nvarchar(1),U.UpdatePassword)  + '</updatepassword>' +
			'<isdeleted>' + convert(nvarchar(1),U.IsDeleted)  + '</isdeleted>' +
			'</textbox></genxml>' as XMLData,
					
			ROW_NUMBER() OVER (ORDER BY Email ASC) AS ROWID
				FROM    {databaseOwner}{objectQualifier}vw_Users U
				WHERE U.PortalId = @PortalId 
					AND (LOWER(U.Username) LIKE LOWER(@FilterText) 
					OR LOWER(U.FirstName) LIKE LOWER(@FilterText) 
					OR LOWER(U.LastName) LIKE LOWER(@FilterText) 
					OR LOWER(U.DisplayName) LIKE LOWER(@FilterText) 
					OR LOWER(U.Email) LIKE LOWER(@FilterText))
		)
		select ItemId,PortalId,XMLData  
			from [UsersBy]
			where ROWID > @lbound AND ROWID < @ubound 



end

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetDNNUsersCount]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetDNNUsersCount]
GO


CREATE PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetDNNUsersCount]
@PortalId int, 
@FilterText nvarchar(max)
AS
begin

	SELECT count(U.UserId)
	FROM    {databaseOwner}{objectQualifier}vw_Users U
	WHERE U.PortalId = @PortalId 
			AND (LOWER(U.Username) LIKE LOWER(@FilterText) 
			OR LOWER(U.FirstName) LIKE LOWER(@FilterText) 
			OR LOWER(U.LastName) LIKE LOWER(@FilterText) 
			OR LOWER(U.DisplayName) LIKE LOWER(@FilterText) 
			OR LOWER(U.Email) LIKE LOWER(@FilterText))
end


GO




