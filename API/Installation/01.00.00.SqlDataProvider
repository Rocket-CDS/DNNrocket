/************************************************************/
/*****              SqlDataProvider                     *****/
/*****                                                  *****/
/*****                                                  *****/
/***** Note: To manually execute this script you must   *****/
/*****       perform a search and replace operation     *****/
/*****       for {databaseOwner} and {objectQualifier}  *****/
/*****                                                  *****/
/************************************************************/



/************************************************************/
/*****              SqlDataProvider                     *****/
/************************************************************/

-------------------------------------------------------------------------------
--------------                       TABLES                        ------------
-------------------------------------------------------------------------------
-- CREATE DNNrocket
if NOT exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket]') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN

CREATE TABLE {databaseOwner}[{objectQualifier}DNNrocket] (
	[ItemId] [int] IDENTITY (1, 1) NOT NULL ,
	[PortalId] [int] NULL ,
	[ModuleId] [int] NULL ,
	[TypeCode] [nvarchar](50) NULL ,
	[XMLData] [xml] NULL ,
	[GUIDKey] [nvarchar](250) NULL ,
	[ModifiedDate] [datetime] NULL ,
	[TextData] [nvarchar](MAX) NULL ,
	[XrefItemId] [int] NULL ,
	[ParentItemId] [int] NULL ,
	[Lang] [nvarchar] (50) NULL ,
	[UserId] [int] NOT NULL CONSTRAINT [DF_DNNrocket_UserId] DEFAULT ((-1))
	CONSTRAINT [PK_DNNrocket] PRIMARY KEY  CLUSTERED 
	(
		[ItemId]
	)  ON [PRIMARY] 
) ON [PRIMARY]

-- Index DNNrocket
 CREATE  INDEX [IX_DNNrocketXref] ON {databaseOwner}[{objectQualifier}DNNrocket]([XrefItemId]) ON [PRIMARY]
 CREATE  INDEX [IX_DNNrocketMod] ON {databaseOwner}[{objectQualifier}DNNrocket]([ModuleId]) ON [PRIMARY]
 CREATE  INDEX [IX_DNNrocketParent] ON {databaseOwner}[{objectQualifier}DNNrocket]([ParentItemId]) ON [PRIMARY]
 CREATE  INDEX [IX_DNNrocketPortal] ON {databaseOwner}[{objectQualifier}DNNrocket]([PortalId]) ON [PRIMARY]
 CREATE  INDEX [IX_DNNrocketType] ON {databaseOwner}[{objectQualifier}DNNrocket]([TypeCode]) ON [PRIMARY]
 CREATE  INDEX [IX_DNNrocketUserId] ON {databaseOwner}[{objectQualifier}DNNrocket]([UserId]) ON [PRIMARY]
 CREATE  INDEX [IX_DNNrocketLang] ON {databaseOwner}[{objectQualifier}DNNrocket]([Lang]) ON [PRIMARY]

END

GO


-------------------------------------------------------------------------------
--------------                       FUNCTIONS                     ------------
-------------------------------------------------------------------------------


SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocketLangMerge]') and OBJECTPROPERTY(id, N'IsScalarFunction') = 1)
drop function {databaseOwner}[{objectQualifier}DNNrocketLangMerge]
GO

CREATE FUNCTION {databaseOwner}[{objectQualifier}DNNrocketLangMerge](@xmllangdata AS XML,@xmlbasedata AS XML)
RETURNS XML
BEGIN

DECLARE @rtndata AS XML

IF NOT @xmlbasedata IS NULL
BEGIN
	IF NOT @xmllangdata IS NULL
	BEGIN
		SET @xmlbasedata.modify('insert <lang/> as last into /genxml[1]')
		SET @xmlbasedata.modify('insert sql:variable("@xmllangdata") as last into /genxml[1]/lang[1]')
	END
	SET @rtndata = @xmlbasedata
END
ELSE
BEGIN
	-- is not a language record so just return the language data
	SET @rtndata = ISNULL(@xmllangdata,'')
END

RETURN @rtndata

END

GO

SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO



-------------------------------------------------------------------------------
--------------                       SPROCS                        ------------
-------------------------------------------------------------------------------

SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS ON 
GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_CleanData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_CleanData]
GO

CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_CleanData]
AS
begin

/***  Clean ALL data that is not linked to a module.  i.e. modules that have been deleted. **/
delete from {databaseOwner}{objectQualifier}DNNrocket where moduleid not in (select moduleid from {databaseOwner}{objectQualifier}Modules) and moduleid > 0 
	
end

GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_Delete]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_Delete]
GO

CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_Delete]
@ItemID int
AS
begin
	delete from {databaseOwner}[{objectQualifier}DNNrocket] 
	where ItemId = @ItemId
	
	-- Delete all linked child records.
	delete from {databaseOwner}[{objectQualifier}DNNrocket] 
	where ParentItemId = @ItemId
	
end

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_Update]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_Update]
GO


CREATE   PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_Update]
(
@ItemId int,
@PortalId int, 
@ModuleId int,
@TypeCode nvarchar(50),
@XMLData xml,
@GUIDKey nvarchar(250),
@ModifiedDate datetime,
@TextData nvarchar(MAX),
@XrefItemId int,
@ParentItemId int,
@UserId int,
@Lang nvarchar(10)
)
AS
BEGIN

	if not exists (select ItemID from {databaseOwner}[{objectQualifier}DNNrocket] where ItemID = @ItemID
 )
	begin
		insert into {databaseOwner}[{objectQualifier}DNNrocket]
		(
PortalId, 
ModuleId,
TypeCode,
XMLData,
GUIDKey,
ModifiedDate,
TextData,
XrefItemId,
ParentItemId,
UserId,
Lang
		)
		values
		(
@PortalId, 
@ModuleId,
@TypeCode,
@XMLData,
@GUIDKey,
@ModifiedDate,
@TextData,
@XrefItemId,
@ParentItemId,
@UserId,
@Lang
		)
		
		set @ItemID = @@IDENTITY

	end
	else
	begin
		Update {databaseOwner}[{objectQualifier}DNNrocket]
		set 
PortalId = @PortalId, 
ModuleId = @ModuleId,
TypeCode = @TypeCode,
XMLData = @XMLData,
GUIDKey = @GUIDKey,
ModifiedDate = @ModifiedDate,
TextData = @TextData,
XrefItemId = @XrefItemId,
ParentItemId = @ParentItemId,
UserId = @UserId,
Lang = @Lang
		where ItemId = @ItemId
 
	end
	
	select @ItemID

END

GO


if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_Get]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_Get]
GO


CREATE     PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_Get]
@ItemID int,
@Lang nvarchar(10)
AS
begin
	select
	NB1.[ItemId]
	,NB1.[PortalId]
	,NB1.[ModuleId]
	,NB1.[TypeCode]
	,{databaseOwner}[{objectQualifier}DNNrocketLangMerge](NB2.[XMLData],NB1.[XMLData]) as [XMLData]
	,NB1.[GUIDKey]
	,NB1.[ModifiedDate]
	,NB1.[TextData]
	,NB1.[XrefItemId]
	,NB1.[ParentItemId]
	,ISNULL(NB2.[Lang],ISNULL(NB1.[Lang],'')) as [Lang] 
	,NB1.[UserId]
	from {databaseOwner}[{objectQualifier}DNNrocket] as NB1
	left join dbo.[DNNrocket] as NB2 on NB1.Itemid = NB2.ParentItemId and NB2.Lang = @Lang  and NB2.TypeCode = NB1.TypeCode + 'LANG'
	where NB1.ItemId = @ItemId
end

GO




if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetData]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetData]
GO

CREATE     PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetData]
@ItemID int
AS
begin
	select
	[ItemId]
	,[PortalId]
	,[ModuleId]
	,[TypeCode]
	,[XMLData]
	,[GUIDKey]
	,[ModifiedDate]
	,[TextData]
	,[XrefItemId]
	,[ParentItemId]
	,[Lang] 
	,[UserId]
	from {databaseOwner}[{objectQualifier}DNNrocket] as NB1
	where NB1.ItemId = @ItemId
end
GO

if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetDataLang]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetDataLang]
GO

CREATE     PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetDataLang]
@ParentItemId int,
@Lang nvarchar(10)
AS
begin
	select
	[ItemId]
	,[PortalId]
	,[ModuleId]
	,[TypeCode]
	,[XMLData]
	,[GUIDKey]
	,[ModifiedDate]
	,[TextData]
	,[XrefItemId]
	,[ParentItemId]
	,[Lang] 
	,[UserId]
	from {databaseOwner}[{objectQualifier}DNNrocket] as NB1
	where NB1.ParentItemId = @ParentItemId and NB1.Lang = @Lang
end
GO




if exists (select * from dbo.sysobjects where id = object_id(N'{databaseOwner}[{objectQualifier}DNNrocket_GetList]') and OBJECTPROPERTY(id, N'IsProcedure') = 1)
drop procedure {databaseOwner}[{objectQualifier}DNNrocket_GetList]
GO

CREATE    PROCEDURE {databaseOwner}[{objectQualifier}DNNrocket_GetList]
@PortalId int, 
@ModuleId int,
@TypeCode nvarchar(50),
@Filter nvarchar(1000),
@OrderBy nvarchar(500),
@ReturnLimit int = 0,
@pageNum int = 0,
@PageSize int = 0,
@RecordCount int = 0,
@Lang nvarchar(50) = ''

AS
begin

	SET NOCOUNT ON
	  DECLARE
		 @STMT nvarchar(max)         -- SQL to execute
		,@rtnFields nvarchar(max)

	IF (@PortalId >= 0) BEGIN

		IF (@ModuleId >= 0) BEGIN
			SET @Filter = ' and (NB1.PortalId = '''  + Convert(nvarchar(10),@PortalId) + ''' or NB1.PortalId = ''-1'') and (NB1.ModuleId = ''' + Convert(nvarchar(10),@ModuleId) + ''' or NB1.ModuleId = ''-1'') ' + @Filter
		END ELSE BEGIN
			SET @Filter = ' and (NB1.PortalId = '''  + Convert(nvarchar(10),@PortalId) + '''  or NB1.PortalId = ''-1'') ' + @Filter
		END 

	END 

	SET @Filter = REPLACE(@Filter,'[XMLData]','{databaseOwner}[{objectQualifier}DNNrocketLangMerge](NB2.[XMLData],NB1.[XMLData])')
	SET @OrderBy = REPLACE(@OrderBy,'[XMLData]','{databaseOwner}[{objectQualifier}DNNrocketLangMerge](NB2.[XMLData],NB1.[XMLData])')

	set @rtnFields = ' NB1.[ItemId] '
	set @rtnFields = @rtnFields + ',{databaseOwner}[{objectQualifier}DNNrocketLangMerge](NB2.[XMLData],NB1.[XMLData]) as [XMLData] '				
	set @rtnFields = @rtnFields + ',ISNULL(NB2.[Lang],ISNULL(NB1.[Lang],'''')) as [Lang] '	 
 
	set @rtnFields = @rtnFields + ',NB1.[PortalId] '
	set @rtnFields = @rtnFields + ',NB1.[ModuleId] '
	set @rtnFields = @rtnFields + ',NB1.[TypeCode] '
	set @rtnFields = @rtnFields + ',NB1.[GUIDKey] '
	set @rtnFields = @rtnFields + ',NB1.[ModifiedDate] '
	set @rtnFields = @rtnFields + ',NB1.[TextData] '
	set @rtnFields = @rtnFields + ',NB1.[XrefItemId] '
	set @rtnFields = @rtnFields + ',NB1.[ParentItemId] '
	set @rtnFields = @rtnFields + ',NB1.[UserId] '


	IF (@PageSize > 0)
	BEGIN
			-- Do Paging
		SET @STMT = 'DECLARE @recct int '
		set @STMT = @STMT + ' SET @recct = ' + Convert(nvarchar(5),@RecordCount) 
		
		set @STMT = @STMT + '   DECLARE @lbound int, @ubound int '

		SET @pageNum = ABS(@pageNum)
		SET @pageSize = ABS(@pageSize)
		IF @pageNum < 1 SET @pageNum = 1
		IF @pageSize < 1 SET @pageSize = 1

		set @STMT = @STMT + ' SET @lbound = ' + convert(nvarchar(50),((@pageNum - 1) * @pageSize))
		set @STMT = @STMT + ' SET @ubound = @lbound + ' + convert(nvarchar(50),(@pageSize + 1))
		set @STMT = @STMT + ' IF @lbound >= @recct BEGIN '
		set @STMT = @STMT + '   SET @ubound = @recct + 1 '
		set @STMT = @STMT + '   SET @lbound = @ubound - (' + convert(nvarchar(50),(@pageSize + 1)) + ') ' -- return the last page of records if no records would be on the specified page '
		set @STMT = @STMT + ' END '
		
		-- Default order by clause
		if @OrderBy = '' 
		Begin
			set @OrderBy = ' ORDER BY NB1.ModifiedDate DESC '
		End
		
		set @STMT = @STMT + ' SELECT '
		if @ReturnLimit > 0 
		begin
			set @STMT = @STMT + ' top ' + convert(nvarchar(10),@ReturnLimit)
		end
		
		set @STMT = @STMT + @rtnFields		

		set @STMT = @STMT + ' FROM    (
								SELECT  ROW_NUMBER() OVER(' + @orderBy + ') AS row, '
		set @STMT = @STMT + @rtnFields		
		set @STMT = @STMT + ' FROM {databaseOwner}[{objectQualifier}DNNrocket]  as NB1 '
		set @STMT = @STMT + ' left join {databaseOwner}[{objectQualifier}DNNrocket] as NB2 on NB2.ParentItemId = NB1.ItemId and NB2.[Lang] = ''' + @Lang + '''  and NB2.TypeCode =  NB1.TypeCode + ''LANG'' ' 
		
				IF (RIGHT(@TypeCode,1) = '%')
			BEGIN
				set @STMT = @STMT + 'WHERE NB1.TypeCode Like ''' + @TypeCode + ''' ' + @Filter  
			END ELSE
			BEGIN
				IF (@TypeCode = '')
				BEGIN
					set @STMT = @STMT + 'WHERE NB1.TypeCode != ''''' + @Filter  
				END ELSE
				BEGIN
					set @STMT = @STMT + 'WHERE NB1.TypeCode = ''' + @TypeCode + ''' ' + @Filter  
				END
			END	                                                              
			
			set @STMT = @STMT + ' ) AS NB1 '
			set @STMT = @STMT + ' left join {databaseOwner}[{objectQualifier}DNNrocket] as NB2 on NB2.ParentItemId = NB1.ItemId and NB2.[Lang] = ''' + @Lang + '''  and NB2.TypeCode =  NB1.TypeCode + ''LANG'' ' 
			set @STMT = @STMT + ' WHERE row > @lbound AND row < @ubound '

			
	END ELSE
	BEGIN
		-- DO NON-PAGING

		set @STMT = ' SELECT '
		if @ReturnLimit > 0 
		begin
			set @STMT = @STMT + ' top ' + convert(nvarchar(10),@ReturnLimit)
		end
		
		set @STMT = @STMT + @rtnFields		

		set @STMT = @STMT + ' FROM {databaseOwner}[{objectQualifier}DNNrocket]  as NB1 '
		set @STMT = @STMT + ' left join {databaseOwner}[{objectQualifier}DNNrocket] as NB2 on NB2.ParentItemId = NB1.ItemId and NB2.[Lang] = ''' + @Lang + '''  and NB2.TypeCode =  NB1.TypeCode + ''LANG'' ' 
	
		IF (RIGHT(@TypeCode,1) = '%')
		BEGIN
			set @STMT = @STMT + 'WHERE NB1.TypeCode Like ''' + @TypeCode + ''' ' + @Filter  
		END ELSE
		BEGIN
			IF (@TypeCode = '')
			BEGIN
				set @STMT = @STMT + 'WHERE NB1.TypeCode != ''''' + @Filter  
			END ELSE
			BEGIN
				set @STMT = @STMT + 'WHERE NB1.TypeCode = ''' + @TypeCode + ''' ' + @Filter  
			END
		END	                                                              	

		set @STMT = @STMT + ' ' + @OrderBy                                                           	

	END		



	EXEC sp_executeSQL @STMT                 -- return requested records

end


GO
SET QUOTED_IDENTIFIER OFF 
GO
SET ANSI_NULLS ON 
GO
