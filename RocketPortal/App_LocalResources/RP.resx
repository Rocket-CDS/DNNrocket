<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="actionprovider.Help" xml:space="preserve">
    <value>Action providers can be executed from here.  An action provider is designed to do a single action on the store, usually to update records or fix problems.
&lt;br/&gt;
The assembly that will be executed should be installed into the bin folder and then the correct assembly, namespace, class and extra data can be added into the fields below. &lt;br/&gt;The action provider assembly should inherit the "ActionProvider" class.</value>
  </data>
  <data name="actionprovider.Text" xml:space="preserve">
    <value>Action Provider</value>
  </data>
  <data name="addmanager.Text" xml:space="preserve">
    <value>Add Manager</value>
  </data>
  <data name="assembly.Text" xml:space="preserve">
    <value>Assembly Name</value>
  </data>
  <data name="confirmationcode.Text" xml:space="preserve">
    <value>Confirmation Code</value>
  </data>
  <data name="defaultlanguage.Text" xml:space="preserve">
    <value>Default Language</value>
  </data>
  <data name="deleteportal.Msg" xml:space="preserve">
    <value>Deletion of this service will result in the removal of ALL data linked to the service.  To continue enter the code below into the confirmation textbox.</value>
  </data>
  <data name="general.Text" xml:space="preserve">
    <value>General</value>
  </data>
  <data name="imagetype.Text" xml:space="preserve">
    <value>Image Type</value>
  </data>
  <data name="languages.Text" xml:space="preserve">
    <value>Languages</value>
  </data>
  <data name="manageremail.Text" xml:space="preserve">
    <value>Manager Email</value>
  </data>
  <data name="managerpassword.Text" xml:space="preserve">
    <value>Manager Pasword</value>
  </data>
  <data name="name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="namespaceclass.Text" xml:space="preserve">
    <value>Namespace.Class</value>
  </data>
  <data name="newservice.Text" xml:space="preserve">
    <value>New Service</value>
  </data>
  <data name="protocol.Text" xml:space="preserve">
    <value>Protocol</value>
  </data>
  <data name="rootdomain.Text" xml:space="preserve">
    <value>Root Domain</value>
  </data>
  <data name="securitycode.Help" xml:space="preserve">
    <value>The Secuirty Code is used to register a Data Client.  This code is sent by the client system to get access to this Data Service.  &lt;b&gt;KEEP THIS CODE SECRET&lt;/b&gt;</value>
  </data>
  <data name="securitycode.Text" xml:space="preserve">
    <value>Security Code</value>
  </data>
  <data name="selectsystem.Text" xml:space="preserve">
    <value>Select the type of Service.</value>
  </data>
  <data name="service.Text" xml:space="preserve">
    <value>Services</value>
  </data>
  <data name="serviceurl.Text" xml:space="preserve">
    <value>Service URL</value>
  </data>
  <data name="system.Text" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="validate.Text" xml:space="preserve">
    <value>Validate</value>
  </data>
</root>