<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="roles.Text" xml:space="preserve">
    <value>Administrators,Manager,Editor,ClientEditor,Registered Users,Subscribers,All</value>
  </data>
  <data name="licensekey.Text" xml:space="preserve">
    <value>License Key</value>
  </data>
  <data name="systemname.Text" xml:space="preserve">
    <value>System Name</value>
  </data>
  <data name="systemrelpath.Text" xml:space="preserve">
    <value>System Rel Path</value>
  </data>
  <data name="systems.Text" xml:space="preserve">
    <value>Systems</value>
  </data>
  <data name="systemtable.Text" xml:space="preserve">
    <value>System Table</value>
  </data>
  <data name="assembly.Text" xml:space="preserve">
    <value>Assembly</value>
  </data>
  <data name="ctrlkey.Text" xml:space="preserve">
    <value>Key</value>
  </data>
  <data name="description.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="group.Text" xml:space="preserve">
    <value>Group</value>
  </data>
  <data name="help.Text" xml:space="preserve">
    <value>Help</value>
  </data>
  <data name="hidden.Text" xml:space="preserve">
    <value>Hidden</value>
  </data>
  <data name="icon.Text" xml:space="preserve">
    <value>Icon class</value>
  </data>
  <data name="interfaces.Text" xml:space="preserve">
    <value>Interfaces</value>
  </data>
  <data name="namespaceclass.Text" xml:space="preserve">
    <value>Namespace and Class</value>
  </data>
  <data name="parameters.Text" xml:space="preserve">
    <value>Parameters</value>
  </data>
  <data name="providertype.Text" xml:space="preserve">
    <value>Provider Type</value>
  </data>
  <data name="systemdata.Text" xml:space="preserve">
    <value>System Data</value>
  </data>
  <data name="adminurl.Text" xml:space="preserve">
    <value>Admin URL</value>
  </data>
  <data name="apiurl.Text" xml:space="preserve">
    <value>API URL</value>
  </data>
  <data name="system.Text" xml:space="preserve">
    <value>System</value>
  </data>
  <data name="interfacekey.Text" xml:space="preserve">
    <value>Interface Key</value>
  </data>
  <data name="fieldcol.Text" xml:space="preserve">
    <value>DB Col</value>
  </data>
  <data name="fieldname.Text" xml:space="preserve">
    <value>Field Name</value>
  </data>
  <data name="fieldxpath.Text" xml:space="preserve">
    <value>xPath</value>
  </data>
  <data name="idxfield.Text" xml:space="preserve">
    <value>Index Fields</value>
  </data>
  <data name="name.Text" xml:space="preserve">
    <value>Name</value>
  </data>
  <data name="settings.Text" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="value.Text" xml:space="preserve">
    <value>Value</value>
  </data>
  <data name="groupname.Text" xml:space="preserve">
    <value>Group Name</value>
  </data>
  <data name="groupref.Text" xml:space="preserve">
    <value>Group Ref</value>
  </data>
  <data name="menugroups.Text" xml:space="preserve">
    <value>Menu Groups</value>
  </data>
  <data name="provtypes.Text" xml:space="preserve">
    <value>Provider Types</value>
  </data>
  <data name="defaulttemplate.Text" xml:space="preserve">
    <value>Default Template</value>
  </data>
  <data name="defaulttheme.Text" xml:space="preserve">
    <value>Default Theme</value>
  </data>
  <data name="defaultcommand.Text" xml:space="preserve">
    <value>Default Command</value>
  </data>
  <data name="groupicon.Text" xml:space="preserve">
    <value>Group Icon Class</value>
  </data>
  <data name="interfaceicon.Text" xml:space="preserve">
    <value>Interface Icon Class</value>
  </data>
  <data name="entitytypecode.Text" xml:space="preserve">
    <value>Entity Type Code</value>
  </data>
  <data name="indexref.Text" xml:space="preserve">
    <value>Index Ref (Join Table)</value>
  </data>
  <data name="controlrelpath.Text" xml:space="preserve">
    <value>Control Relative Path</value>
  </data>
  <data name="encryptkey.Text" xml:space="preserve">
    <value>Encryption Key</value>
  </data>
  <data name="interfacecopy.Text" xml:space="preserve">
    <value>Copy interface to another system</value>
  </data>
  <data name="xreftypecode.Text" xml:space="preserve">
    <value>Database Xref TypeCode</value>
  </data>
  <data name="dbtypecode.Text" xml:space="preserve">
    <value>Database TypeCode</value>
  </data>
  <data name="onmenu.Text" xml:space="preserve">
    <value>Display On Admin Menu</value>
  </data>
  <data name="debugmode.Text" xml:space="preserve">
    <value>Debug Mode (TURN OFF for production)</value>
  </data>
  <data name="cache.Text" xml:space="preserve">
    <value>Cached</value>
  </data>
  <data name="themeversion.Text" xml:space="preserve">
    <value>Theme Version</value>
  </data>
  <data name="defaultvalue.Text" xml:space="preserve">
    <value>Default Value</value>
  </data>
  <data name="databasetable.Text" xml:space="preserve">
    <value>Database Table</value>
  </data>
  <data name="defaultinterface.Text" xml:space="preserve">
    <value>Default Interface</value>
  </data>
  <data name="ref.Text" xml:space="preserve">
    <value>Ref</value>
  </data>
  <data name="ftproot.Text" xml:space="preserve">
    <value>FTP Root Directory (not including the default directory)</value>
  </data>
  <data name="ftppassword.Text" xml:space="preserve">
    <value>FTP Password</value>
  </data>
  <data name="ftpserver.Text" xml:space="preserve">
    <value>FTP Server</value>
  </data>
  <data name="ftpuser.Text" xml:space="preserve">
    <value>FTP User</value>
  </data>
  <data name="globalsettings.Text" xml:space="preserve">
    <value>Global Settings</value>
  </data>
  <data name="privateftp.Text" xml:space="preserve">
    <value>Private FTP Settings</value>
  </data>
  <data name="imagetype.Help" xml:space="preserve">
    <value>Defines the image type that will be used by the image thumbnailer.  Usually this will be the image extension type  "png" or "jpg".  However, the hosting server needs "png" drivers.  If not available the image type will need to be set to "jpg".</value>
  </data>
  <data name="imagetype.Text" xml:space="preserve">
    <value>Image Type</value>
  </data>
  <data name="licenses.Text" xml:space="preserve">
    <value>Licenses</value>
  </data>
  <data name="search.Text" xml:space="preserve">
    <value>Search</value>
  </data>
  <data name="proavailable.Text" xml:space="preserve">
    <value>Pro Version Available</value>
  </data>
  <data name="privateftp.Help" xml:space="preserve">
    <value>A private ftp service can be turned on.  Private templates can be shared between portals and installations across servers.  Using a standard FTP service.  This feature is only available in professional version.</value>
  </data>
  <data name="securityaccess.Text" xml:space="preserve">
    <value>Security Access</value>
  </data>
  <data name="ckeditorcsslist.Help" xml:space="preserve">
    <value>This is a csv list of css files to be used for inline content in the CKEditor.  This is very often the skin.css or/and portal.css.  The format is: '/myfolder/myfile1.css','/myfolder/myfile2.css'.  The w3-css is already included by default.</value>
  </data>
  <data name="ckeditorcsslist.Text" xml:space="preserve">
    <value>CKEditor CSS List</value>
  </data>
  <data name="cleartempdb.Text" xml:space="preserve">
    <value>Clear Temp DB</value>
  </data>
  <data name="cleartempdb.Confirm" xml:space="preserve">
    <value>Delete ALL record in DNNrocketTemp table ?</value>
  </data>
  <data name="recycleapppool.Text" xml:space="preserve">
    <value>Recycle AppPool</value>
  </data>
  <data name="clearfilecache.Text" xml:space="preserve">
    <value>Clear File Cache</value>
  </data>
  <data name="clearmemcache.Text" xml:space="preserve">
    <value>Clear Memory Cache</value>
  </data>
  <data name="tuencacheoff.Text" xml:space="preserve">
    <value>Turn Cache Off</value>
  </data>
  <data name="colorhex.Text" xml:space="preserve">
    <value>Color Hex Code</value>
  </data>
  <data name="globalheading.Help" xml:space="preserve">
    <value>The Global HTML page header will be injected into ALL pages where a DNNrocket module exists and across ALL websites in the DNN installation.  The idea of this setting is to help inject the required css without changing the skin.  By default DNNrocket uses &lt;a href='https://www.w3schools.com/w3css/' target='_blank' &gt;W3.CSS&lt;/a&gt;, this is a lightweight responsive CSS framework.  </value>
  </data>
  <data name="globalheading.Text" xml:space="preserve">
    <value>Global HTML page header</value>
  </data>
  <data name="backuplimit.Text" xml:space="preserve">
    <value>Backup Limit</value>
  </data>
  <data name="backuplimit.Help" xml:space="preserve">
    <value>If any module has an auto backup facility, this is the amount of backup files that will be kept.  If a module creates more than this the oldest backups will be removed from the file system.  </value>
  </data>
</root>